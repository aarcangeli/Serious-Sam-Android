apply plugin: 'com.android.application'

def H3D_FOLDER = file('../Serious-Engine/Sources/H3D')

/**
 * Get version and version code from environment or version.properties
 */
def getReleaseVersion() {
    def SSA_VERSION = System.getenv('SSA_VERSION')

    def versionPropsFile = file('../version.properties')
    if (!versionPropsFile.isFile()) {
        throw new RuntimeException("File not found '${versionPropsFile.getAbsolutePath()}'")
    }

    def is = new FileInputStream(versionPropsFile)
    Properties versionProps = new Properties()
    versionProps.load(is)
    is.close()

    return [
            version: SSA_VERSION ? SSA_VERSION : versionProps['VERSION'].toString(),
            versionCode: versionProps['VERSION_CODE'].toInteger(),
    ]
}

/**
 * Get signing configs from environment or signing.properties
 */
def getSigningInfo() {
    def KEY_ALIAS = System.getenv('KEY_ALIAS')
    def STORE_FILE = System.getenv('STORE_FILE')
    def STORE_PASSWORD = System.getenv('STORE_PASSWORD')
    def KEY_PASSWORD = System.getenv('KEY_PASSWORD')

    if (KEY_ALIAS && STORE_FILE && STORE_PASSWORD && KEY_PASSWORD) {
        android {
            signingConfigs {
                app {
                    keyAlias KEY_ALIAS.trim()
                    keyPassword KEY_PASSWORD.trim()
                    storeFile file(STORE_FILE.trim())
                    storePassword STORE_PASSWORD.trim()
                    v2SigningEnabled false
                }
            }
        }
        return android.signingConfigs.app
    }

    def propFile = file('../signing.properties')
    if (propFile.canRead()) {
        Properties props = new Properties()

        def is = new FileInputStream(propFile);
        props.load(is)
        is.close()

        android {
            signingConfigs {
                app {
                    keyAlias props['KEY_ALIAS'].trim()
                    keyPassword props['KEY_PASSWORD'].trim()
                    storeFile file(props['STORE_FILE'].trim())
                    storePassword props['STORE_PASSWORD'].trim()
                    v2SigningEnabled false
                }
            }
        }
        return android.signingConfigs.app
    }
}

android {

    def signing = getSigningInfo()
    def ver = getReleaseVersion()

    println("Serious-Sam-Android v${ver.version} (${ver.versionCode})")
    if (signing) {
        println("Signing as '${signing.keyAlias}' (keyStore: $signing.storeFile)")
    }

	task copyH3DLibs64(type: Copy) {
		println("Copying H3D x64 libs")
		def arm64V8aDir = file("${buildDir}/intermediates/cmake/TSERelease/obj/arm64-v8a")
		// Copy libraries for arm64-v8a
		from(arm64V8aDir) {
			include '*H3D*'
		}
		into("src/main/libs_tse_h3d/arm64-v8a")
	}

	task copyH3DLibs32(type: Copy) {
		println("Copying H3D x32 libs")
		// Define source directories for different architectures
		def armeabiV7aDir = file("${buildDir}/intermediates/cmake/TSERelease/obj/armeabi-v7a")
		// Copy libraries for armeabi-v7a
		from(armeabiV7aDir) {
			include '*H3D*'
		}
		into("src/main/libs_tse_h3d/armeabi-v7a")
	}

	task copyAllH3DLibs {
		dependsOn 'copyH3DLibs64', 'copyH3DLibs32'
	}

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.github.aarcangeli.serioussamandroid"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode ver.versionCode
        versionName ver.version
        setProperty("archivesBaseName", "SeriousSamAndroid-v$versionName")
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
        externalNativeBuild {
            cmake {
                cppFlags "-fexceptions"
                abiFilters "armeabi-v7a", "arm64-v8a"
                arguments "-DSSA_VERSION=" + versionName
				arguments "-DANDROID_ARM_NEON=ON"
            }
        }
    }
    buildTypes {
        debug {
            if (signing) {
                signingConfig signing
            }
            debuggable true
            jniDebuggable true
        }
        release {
            if (signing) {
                signingConfig signing
            }
			debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "version"
    productFlavors {
        TSE {
		dimension "version"
		applicationId "com.skyrimus.serioussam.tse"
		versionNameSuffix "-TSE"
		buildConfigField('String','home','"SeriousSamTSE"')
		sourceSets {
			TSE {
				res.srcDirs = ['src/main/res_tse','src/main/res']
				jniLibs.srcDirs = ['src/main/libs_tse_adv/']
				if(!H3D_FOLDER.exists()) {
					jniLibs.srcDirs += ['src/main/libs_tse_h3d/']
				} else {
					afterEvaluate {
						tasks.findByName('externalNativeBuildTSERelease')?.finalizedBy(copyAllH3DLibs)
					}
				}
			}
		}
	}
        TFE {
		dimension "version"
		applicationId "com.skyrimus.serioussam.tfe"
		versionNameSuffix "-TFE"
		buildConfigField('String','home','"SeriousSamTFE"')
		sourceSets {
			TFE {
			res.srcDirs = ['src/main/res_tfe','src/main/res']
			jniLibs.srcDirs = ['src/main/libs_tfe/']
			}
		}
        externalNativeBuild {
				cmake {
					cppFlags "-fexceptions"
					arguments "-DFIRST_ENCOUNTER=1"
				}
			}
		}
    }
		
    externalNativeBuild {
        cmake {
            path "../CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.github.sergioroprado:KeyboardHeightProvider:1.0.4-Egemen'
	implementation 'com.google.code.gson:gson:2.8.6'
	implementation 'com.liulishuo.filedownloader:library:1.7.7'
}
