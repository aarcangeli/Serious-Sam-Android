apply plugin: 'com.android.application'

def getReleaseVersion() {

    def versionPropsFile = file('../version.properties')
    if (!versionPropsFile.isFile()) {
        throw new RuntimeException("File not found '${versionPropsFile.getAbsolutePath()}'")
    }

    def is = new FileInputStream(versionPropsFile)
    Properties versionProps = new Properties()
    versionProps.load(is)
    is.close()

    return [
            version: versionProps['VERSION'].toString(),
            versionCode: versionProps['VERSION_CODE'].toInteger(),
    ]
}

def signing = null

// read signign informations
def propFile = file('../signing.properties')
if (propFile.canRead()) {
    Properties props = new Properties()

    def is = new FileInputStream(propFile);
    props.load(is)
    is.close()

    android {
        signingConfigs {
            app {
                keyAlias props['KEY_ALIAS']
                keyPassword props['KEY_PASSWORD']
                storeFile file(props['STORE_FILE'])
                storePassword props['STORE_PASSWORD']
                v2SigningEnabled false
            }
        }
    }

    signing = android.signingConfigs.app
}

android {
    def ver = getReleaseVersion()
    println("Serious-Sam-Android v${ver.version} (${ver.versionCode})")
    if (signing) {
        println("Signign as '${signing.keyAlias}'")
    }

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.github.aarcangeli.serioussamandroid"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode ver.versionCode
        versionName ver.version
        setProperty("archivesBaseName", "SeriousSamAndroid-v$versionName")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        externalNativeBuild {
            cmake {
                cppFlags "-fexceptions"
                abiFilters "x86", "armeabi-v7a"
                arguments "-DSSA_VERSION=" + versionName
            }
        }
    }
    buildTypes {
        debug {
            if (signing) {
                signingConfig signing
            }
            debuggable true
            jniDebuggable true
        }
        release {
            if (signing) {
                signingConfig signing
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "../CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.hold1:keyboardheightprovider:0.0.9'
}
