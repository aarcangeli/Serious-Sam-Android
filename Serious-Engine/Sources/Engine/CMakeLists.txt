include(generatedFiles)

set(SE_BASE "${SE_SOURCES}/Engine")
set(SE_CURRENT_GENERATED_DIR "${SE_GENERATED_DIR}/Engine")

set(
  SE_GEN_SOURCES

  # generated files
  "${SE_CURRENT_GENERATED_DIR}/Base/Scanner.cpp"
  "${SE_CURRENT_GENERATED_DIR}/Base/Parser.cpp"
  "${SE_CURRENT_GENERATED_DIR}/Ska/smcScan.cpp"
  "${SE_CURRENT_GENERATED_DIR}/Ska/smcPars.cpp"
)

# compile es files
run_ecc(
  SE_GEN_SOURCES

  Classes/BaseEvents
  Classes/MovableBrushEntity
  Classes/MovableEntity
  Classes/MovableModelEntity
  Classes/PlayerEntity
)

add_custom_target(se-autogenerated ALL DEPENDS ${SE_GEN_SOURCES})

set(
  SE_ENGINE_SOURCES

  # engine files
  "${SE_BASE}/Base/Anim.cpp"
  "${SE_BASE}/Base/Changeable.cpp"
  "${SE_BASE}/Base/Console.cpp"
  "${SE_BASE}/Base/CRC.cpp"
  "${SE_BASE}/Base/CRCTable.cpp"
  "${SE_BASE}/Base/CTString.cpp"
  "${SE_BASE}/Base/Directory.cpp"
  "${SE_BASE}/Base/FileName.cpp"
  "${SE_BASE}/Base/IFeel.cpp"
  "${SE_BASE}/Base/Lists.cpp"
  "${SE_BASE}/Base/Memory.cpp"
  "${SE_BASE}/Base/Profiling.cpp"
  "${SE_BASE}/Base/ProgressHook.cpp"
  "${SE_BASE}/Base/Protection.cpp"
  "${SE_BASE}/Base/Relations.cpp"
  "${SE_BASE}/Base/ReplaceFile.cpp"
  "${SE_BASE}/Base/Serial.cpp"
  "${SE_BASE}/Base/Shell.cpp"
  "${SE_BASE}/Base/ShellTypes.cpp"
  #        "${SE_BASE}/Base/StackDump.cpp"
  "${SE_BASE}/Base/Statistics.cpp"
  "${SE_BASE}/Base/Stream.cpp"
  "${SE_BASE}/Base/Timer.cpp"
  "${SE_BASE}/Base/Translation.cpp"
  "${SE_BASE}/Base/Unzip.cpp"
  "${SE_BASE}/Base/Updateable.cpp"
  "${SE_BASE}/Math/Float.cpp"
  "${SE_BASE}/Math/Functions.cpp"
  "${SE_BASE}/Math/Geometry.cpp"
  "${SE_BASE}/Math/Geometry_DOUBLE.cpp"
  "${SE_BASE}/Math/Object3D.cpp"
  "${SE_BASE}/Math/Object3D_CSG.cpp"
  "${SE_BASE}/Math/Object3D_IO.cpp"
  "${SE_BASE}/Math/ObjectSector.cpp"
  "${SE_BASE}/Math/Placement.cpp"
  "${SE_BASE}/Math/Projection.cpp"
  "${SE_BASE}/Math/Projection_Isometric.cpp"
  "${SE_BASE}/Math/Projection_Parallel.cpp"
  "${SE_BASE}/Math/Projection_Perspective.cpp"
  "${SE_BASE}/Math/Projection_Simple.cpp"
  "${SE_BASE}/Math/Projection_Simple_DOUBLE.cpp"
  "${SE_BASE}/Math/TextureMapping.cpp"
  #                "${SE_BASE}/Graphics/Benchmark.cpp"
  "${SE_BASE}/Graphics/Color.cpp"
  "${SE_BASE}/Graphics/DepthCheck.cpp"
  "${SE_BASE}/Graphics/DisplayMode.cpp"
  "${SE_BASE}/Graphics/DrawPort.cpp"
  "${SE_BASE}/Graphics/DrawPort_Particles.cpp"
  "${SE_BASE}/Graphics/DrawPort_RenderScene.cpp"
  "${SE_BASE}/Graphics/Fog.cpp"
  "${SE_BASE}/Graphics/Font.cpp"
  "${SE_BASE}/Graphics/Gfx_Direct3D.cpp"
  "${SE_BASE}/Graphics/Gfx_Direct3D_Colors.cpp"
  "${SE_BASE}/Graphics/Gfx_Direct3D_Textures.cpp"
  "${SE_BASE}/Graphics/Gfx_OpenGL.cpp"
  "${SE_BASE}/Graphics/Gfx_OpenGL_Textures.cpp"
  "${SE_BASE}/Graphics/Gfx_OpenGL_Shaders.cpp"
  "${SE_BASE}/Graphics/Gfx_wrapper.cpp"
  "${SE_BASE}/Graphics/GfxLibrary.cpp"
  "${SE_BASE}/Graphics/GfxProfile.cpp"
  "${SE_BASE}/Graphics/Graphics.cpp"
  "${SE_BASE}/Graphics/ImageInfo.cpp"
  "${SE_BASE}/Graphics/Raster.cpp"
  "${SE_BASE}/Graphics/Shader.cpp"
  "${SE_BASE}/Graphics/ShadowMap.cpp"
  "${SE_BASE}/Graphics/Stereo.cpp"
  "${SE_BASE}/Graphics/Texture.cpp"
  "${SE_BASE}/Graphics/TextureEffects.cpp"
  "${SE_BASE}/Graphics/TextureRender.cpp"
  "${SE_BASE}/Sound/SoundData.cpp"
  "${SE_BASE}/Sound/SoundDecoder.cpp"
  "${SE_BASE}/Sound/SoundMixer.cpp"
  "${SE_BASE}/Sound/SoundObject.cpp"
  "${SE_BASE}/Sound/SoundProfile.cpp"
  "${SE_BASE}/Sound/Wave.cpp"
  "${SE_BASE}/Models/EditModel.cpp"
  "${SE_BASE}/Models/MipMaker.cpp"
  "${SE_BASE}/Models/Model.cpp"
  "${SE_BASE}/Models/ModelProfile.cpp"
  "${SE_BASE}/Models/Normals.cpp"
  "${SE_BASE}/Models/RenderModel.cpp"
  "${SE_BASE}/Models/RenderModel_Mask.cpp"
  "${SE_BASE}/Models/RenderModel_View.cpp"
  "${SE_BASE}/Models/VertexGetting.cpp"
  "${SE_BASE}/World/PhysicsProfile.cpp"
  "${SE_BASE}/World/World.cpp"
  "${SE_BASE}/World/WorldCollision.cpp"
  "${SE_BASE}/World/WorldCollisionGrid.cpp"
  "${SE_BASE}/World/WorldCSG.cpp"
  "${SE_BASE}/World/WorldEditingProfile.cpp"
  "${SE_BASE}/World/WorldIO.cpp"
  "${SE_BASE}/World/WorldRayCasting.cpp"
  "${SE_BASE}/Templates/BSP.cpp"
  "${SE_BASE}/Templates/NameTable_CTFileName.cpp"
  "${SE_BASE}/Templates/NameTable_CTranslationPair.cpp"
  "${SE_BASE}/Templates/Stock_CAnimData.cpp"
  "${SE_BASE}/Templates/Stock_CAnimSet.cpp"
  "${SE_BASE}/Templates/Stock_CEntityClass.cpp"
  "${SE_BASE}/Templates/Stock_CMesh.cpp"
  "${SE_BASE}/Templates/Stock_CModelData.cpp"
  "${SE_BASE}/Templates/Stock_CShader.cpp"
  "${SE_BASE}/Templates/Stock_CSkeleton.cpp"
  "${SE_BASE}/Templates/Stock_CSoundData.cpp"
  "${SE_BASE}/Templates/Stock_CTextureData.cpp"
  "${SE_BASE}/Network/ActionBuffer.cpp"
  "${SE_BASE}/Network/ClientInterface.cpp"
  "${SE_BASE}/Network/Compression.cpp"
  "${SE_BASE}/Network/CPacket.cpp"
  "${SE_BASE}/Network/Diff.cpp"
  "${SE_BASE}/Network/MessageDispatcher.cpp"
  "${SE_BASE}/Network/Network.cpp"
  "${SE_BASE}/Network/NetworkMessage.cpp"
  "${SE_BASE}/Network/NetworkProfile.cpp"
  "${SE_BASE}/Network/PlayerBuffer.cpp"
  "${SE_BASE}/Network/PlayerSource.cpp"
  "${SE_BASE}/Network/PlayerTarget.cpp"
  "${SE_BASE}/Network/Server.cpp"
  "${SE_BASE}/Network/SessionState.cpp"
  "${SE_BASE}/Rendering/Render.cpp"
  "${SE_BASE}/Rendering/RenderProfile.cpp"
  "${SE_BASE}/Rendering/SelectOnRender.cpp"
  "${SE_BASE}/Entities/Entity.cpp"
  "${SE_BASE}/Entities/EntityClass.cpp"
  "${SE_BASE}/Entities/EntityCollision.cpp"
  "${SE_BASE}/Entities/EntityCopying.cpp"
  "${SE_BASE}/Entities/EntityProperties.cpp"
  "${SE_BASE}/Entities/FieldBSPTesting.cpp"
  "${SE_BASE}/Entities/LastPositions.cpp"
  "${SE_BASE}/Entities/NearestPolygon.cpp"
  "${SE_BASE}/Entities/PlayerCharacter.cpp"
  "${SE_BASE}/Brushes/Brush.cpp"
  "${SE_BASE}/Brushes/BrushArchive.cpp"
  "${SE_BASE}/Brushes/BrushExport.cpp"
  "${SE_BASE}/Brushes/BrushImport.cpp"
  "${SE_BASE}/Brushes/BrushIO.cpp"
  "${SE_BASE}/Brushes/BrushMip.cpp"
  "${SE_BASE}/Brushes/BrushPolygon.cpp"
  "${SE_BASE}/Brushes/BrushSector.cpp"
  "${SE_BASE}/Brushes/BrushShadows.cpp"
  "${SE_BASE}/Brushes/BrushTriangularize.cpp"
  "${SE_BASE}/Light/LayerMaker.cpp"
  "${SE_BASE}/Light/LayerMixer.cpp"
  "${SE_BASE}/Light/LightSource.cpp"
  "${SE_BASE}/zlib/adler32.c"
  "${SE_BASE}/zlib/compress.c"
  "${SE_BASE}/zlib/deflate.c"
  "${SE_BASE}/zlib/infblock.c"
  "${SE_BASE}/zlib/infcodes.c"
  "${SE_BASE}/zlib/inffast.c"
  "${SE_BASE}/zlib/inflate.c"
  "${SE_BASE}/zlib/inftrees.c"
  "${SE_BASE}/zlib/infutil.c"
  "${SE_BASE}/zlib/trees.c"
  "${SE_BASE}/zlib/uncompr.c"
  "${SE_BASE}/zlib/zutil.c"
  "${SE_BASE}/Ska/AnimSet.cpp"
  "${SE_BASE}/Ska/Mesh.cpp"
  "${SE_BASE}/Ska/ModelInstance.cpp"
  "${SE_BASE}/Ska/RMRender.cpp"
  "${SE_BASE}/Ska/RMRenderMask.cpp"
  "${SE_BASE}/Ska/Skeleton.cpp"
  "${SE_BASE}/Ska/StringTable.cpp"
  "${SE_BASE}/Terrain/ArrayHolder.cpp"
  "${SE_BASE}/Terrain/Terrain.cpp"
  "${SE_BASE}/Terrain/TerrainArchive.cpp"
  "${SE_BASE}/Terrain/TerrainEditing.cpp"
  "${SE_BASE}/Terrain/TerrainLayer.cpp"
  "${SE_BASE}/Terrain/TerrainMisc.cpp"
  "${SE_BASE}/Terrain/TerrainRayCasting.cpp"
  "${SE_BASE}/Terrain/TerrainRender.cpp"
  "${SE_BASE}/Terrain/TerrainTile.cpp"
  "${SE_BASE}/Engine.cpp"
  "${SE_BASE}/StdH.cpp"
  "${SE_BASE}/Base/Synchronization.cpp"
  "${SE_BASE}/Base/Synchronization_win32_fallback.cpp"

  ${SE_GEN_SOURCES}

  # reimplemented custom
  #"${SE_BASE}/Base/Registry.cpp"
  #"${SE_BASE}/Graphics/MultiMonitor.cpp"
  #"${SE_BASE}/Sound/SoundLibrary.cpp"
  #"${SE_BASE}/Base/Input.cpp"
  #"${SE_BASE}/Base/ErrorReporting.cpp"
  #"${SE_BASE}/Network/CommunicationInterface.cpp"
  #"${SE_BASE}/Graphics/ViewPort.cpp"
  #"${SE_BASE}/Graphics/Adapter.cpp"
  #"${SE_BASE}/GameAgent/GameAgent.cpp"

  ${SE_BASE}/_android/ErrorReporting.cpp
  ${SE_BASE}/_android/Input.cpp
  ${SE_BASE}/Sound/SoundLibrary_android.cpp
  ${SE_BASE}/_android/Registry.cpp
  ${SE_BASE}/_android/MultiMonitor.cpp
  ${SE_BASE}/Network/CommunicationInterface_android.cpp
  ${SE_BASE}/Graphics/ViewPort_android.cpp
  ${SE_BASE}/_android/CGfxLibrary.cpp
  ${SE_BASE}/_android/GameAgent.cpp

  # excluded sources
  #"${SE_BASE}/Graphics/Gfx_wrapper_Direct3D.cpp"
  #"${SE_BASE}/Graphics/Gfx_wrapper_OpenGL.cpp"
  #"${SE_BASE}/Templates/AllocationArray.cpp"
  #"${SE_BASE}/Templates/DynamicArray.cpp"
  #"${SE_BASE}/Templates/DynamicContainer.cpp"
  #"${SE_BASE}/Templates/DynamicStackArray.cpp"
  #"${SE_BASE}/Templates/LinearAllocator.cpp"
  #"${SE_BASE}/Templates/NameTable.cpp"
  #"${SE_BASE}/Templates/Selection.cpp"
  #"${SE_BASE}/Templates/StaticArray.cpp"
  #"${SE_BASE}/Templates/StaticStackArray.cpp"
  #"${SE_BASE}/Templates/Stock.cpp"
  #"${SE_BASE}/Rendering/RenCache.cpp"
  #"${SE_BASE}/Rendering/RendASER.cpp"
  #"${SE_BASE}/Rendering/RendClip.cpp"
  #"${SE_BASE}/Rendering/RenderAdding.cpp"
  #"${SE_BASE}/Rendering/RenderBrushes.cpp"
  #"${SE_BASE}/Rendering/RenderModels.cpp"
  #"${SE_BASE}/Rendering/RendMisc.cpp"
)

run_flex("${SE_CURRENT_GENERATED_DIR}/Base/Scanner.cpp" "${SE_BASE}/Base/Scanner.l" "${SE_BASE}/Base/FLEX.skl" "${SE_BASE}/Base")
run_bison("${SE_CURRENT_GENERATED_DIR}/Base/Parser.cpp" "${SE_BASE}/Base/Parser.y" "${SE_CURRENT_GENERATED_DIR}/Base/Parser.c" "")
run_flex("${SE_CURRENT_GENERATED_DIR}/Ska/smcScan.cpp" "${SE_BASE}/Ska/smcScan.l" "${SE_BASE}/Ska/smcFlex.skl" "${SE_BASE}/Ska")
run_bison("${SE_CURRENT_GENERATED_DIR}/Ska/smcPars.cpp" "${SE_BASE}/Ska/smcPars.y" "${SE_CURRENT_GENERATED_DIR}/Ska/smcPars.c" -psyy)

add_library(Engine SHARED ${SE_ENGINE_SOURCES})
add_dependencies(Engine se-ecc)
target_link_libraries(Engine android-adapters)
target_link_libraries(Engine vorbis amp11lib)
target_link_libraries(Engine GLESv2 EGL log android OpenSLES)

target_compile_options(Engine PRIVATE "-I${CMAKE_CURRENT_SOURCE_DIR}")

target_compile_definitions(Engine PUBLIC ENGINE_API=)
target_compile_definitions(Engine PUBLIC PLATFORM_UNIX)
target_compile_definitions(Engine PUBLIC USE_PORTABLE_C)

# Valuate
target_compile_definitions(Engine PUBLIC stricmp=strcasecmp)
target_compile_definitions(Engine PUBLIC strcmpi=strcasecmp)
target_compile_definitions(Engine PUBLIC strnicmp=strncasecmp)
target_compile_definitions(Engine PUBLIC _vsnprintf=vsnprintf)
target_compile_definitions(Engine PUBLIC _snprintf=snprintf)
target_compile_definitions(Engine PUBLIC _strupr=strupr)

add_dependencies(Engine se-autogenerated)
