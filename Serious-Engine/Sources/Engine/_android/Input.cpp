/* Copyright (c) 2002-2012 Croteam Ltd. 
This program is free software; you can redistribute it and/or modify
it under the terms of version 2 of the GNU General Public License as published by
the Free Software Foundation


This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */

#include <Engine/StdH.h>

#include <Engine/Base/Timer.h>
#include <Engine/Base/Input.h>
#include <Engine/Base/Translation.h>
#include <Engine/Base/KeyNames.h>
#include <Engine/Math/Functions.h>
#include <Engine/Graphics/ViewPort.h>
#include <Engine/Base/Console.h>
#include <Engine/Base/Synchronization.h>

#include <Engine/Base/ErrorReporting.h>

extern INDEX inp_iKeyboardReadingMethod;
extern FLOAT inp_fMouseSensitivity;
extern INDEX inp_bAllowMouseAcceleration;
extern INDEX inp_bMousePrecision;
extern FLOAT inp_fMousePrecisionFactor;
extern FLOAT inp_fMousePrecisionThreshold;
extern FLOAT inp_fMousePrecisionTimeout;
extern FLOAT inp_bInvertMouse;
extern INDEX inp_bFilterMouse;
extern INDEX inp_bAllowPrescan;

extern INDEX inp_i2ndMousePort;
extern FLOAT inp_f2ndMouseSensitivity;
extern INDEX inp_b2ndMousePrecision;
extern FLOAT inp_f2ndMousePrecisionThreshold;
extern FLOAT inp_f2ndMousePrecisionTimeout;
extern FLOAT inp_f2ndMousePrecisionFactor;
extern INDEX inp_bFilter2ndMouse;
extern INDEX inp_bInvert2ndMouse;

INDEX inp_iMButton4Dn = 0x20040;
INDEX inp_iMButton4Up = 0x20000;
INDEX inp_iMButton5Dn = 0x10020;
INDEX inp_iMButton5Up = 0x10000;
INDEX inp_bMsgDebugger = FALSE;
INDEX inp_bForceJoystickPolling = 0;
INDEX inp_ctJoysticksAllowed = 8;
INDEX inp_bAutoDisableJoysticks = 0;

static CTString inp_astrAxisTran[MAX_OVERALL_AXES];// translated names for axis

// autogenerated fast conversion tables
static INDEX _aiScanToKid[512];
static INDEX _aiVirtToKid[256];

// variables for message interception
static HHOOK _hGetMsgHook = NULL;
static HHOOK _hSendMsgHook = NULL;
static int _iMouseZ = 0;
static BOOL _bWheelUp = FALSE;
static BOOL _bWheelDn = FALSE;

CTCriticalSection csInput;

// --------- 2ND MOUSE HANDLING

#define MOUSECOMBUFFERSIZE 256L
static HANDLE _h2ndMouse = NONE;
static BOOL _bIgnoreMouse2 = TRUE;
static INDEX _i2ndMouseX, _i2ndMouseY, _i2ndMouseButtons;
static INDEX _iByteNum = 0;
static UBYTE _aubComBytes[4] = {0, 0, 0, 0};
static INDEX _iLastPort = -1;

// pointer to global input object
CInput *_pInput = NULL;

// deafult constructor
CInput::CInput(void) {}


// destructor
CInput::~CInput() {}


void CInput::SetJoyPolling(BOOL bPoll) {}

/*
 * Sets names of keys on keyboard
 */
void CInput::SetKeyNames(void) {}

// check if a joystick exists
BOOL CInput::CheckJoystick(INDEX iJoy) {
return 0;
}

// adds axis and buttons for given joystick
void CInput::AddJoystickAbbilities(INDEX iJoy) {}

/*
 * Initializes all available devices and enumerates available controls
 */
void CInput::Initialize(void) {}


/*
 * Enable direct input
 */

void CInput::EnableInput() {
  inp_bInputEnabled = TRUE;
}


/*
 * Disable direct input
 */
void CInput::DisableInput(void) {
  inp_bInputEnabled = FALSE;
}


/*
 * Scan states of all available input sources
 */
void CInput::GetInput(BOOL bPreScan) {}

// Clear all input states (keys become not pressed, axes are reset to zero)
void CInput::ClearInput(void) {}

const CTString &CInput::GetAxisTransName(INDEX iAxisNo) const {
  return "GetAxisTransName";
}


/*
 * Scans axis and buttons for given joystick
 */
BOOL CInput::ScanJoystick(INDEX iJoy, BOOL bPreScan) {
return 0;
}
